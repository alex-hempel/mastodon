/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as NotificationsRouteImport } from './routes/notifications'
import { Route as HomeRouteImport } from './routes/home'
import { Route as ExploreRouteRouteImport } from './routes/explore/route'
import { Route as ExploreIndexRouteImport } from './routes/explore/index'
import { Route as ExploreTagsRouteImport } from './routes/explore/tags'
import { Route as ExploreSuggestionsRouteImport } from './routes/explore/suggestions'
import { Route as ExploreLinksRouteImport } from './routes/explore/links'

const NotificationsRoute = NotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const ExploreRouteRoute = ExploreRouteRouteImport.update({
  id: '/explore',
  path: '/explore',
  getParentRoute: () => rootRouteImport,
} as any)
const ExploreIndexRoute = ExploreIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ExploreRouteRoute,
} as any)
const ExploreTagsRoute = ExploreTagsRouteImport.update({
  id: '/tags',
  path: '/tags',
  getParentRoute: () => ExploreRouteRoute,
} as any)
const ExploreSuggestionsRoute = ExploreSuggestionsRouteImport.update({
  id: '/suggestions',
  path: '/suggestions',
  getParentRoute: () => ExploreRouteRoute,
} as any)
const ExploreLinksRoute = ExploreLinksRouteImport.update({
  id: '/links',
  path: '/links',
  getParentRoute: () => ExploreRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/explore': typeof ExploreRouteRouteWithChildren
  '/home': typeof HomeRoute
  '/notifications': typeof NotificationsRoute
  '/explore/links': typeof ExploreLinksRoute
  '/explore/suggestions': typeof ExploreSuggestionsRoute
  '/explore/tags': typeof ExploreTagsRoute
  '/explore/': typeof ExploreIndexRoute
}
export interface FileRoutesByTo {
  '/home': typeof HomeRoute
  '/notifications': typeof NotificationsRoute
  '/explore/links': typeof ExploreLinksRoute
  '/explore/suggestions': typeof ExploreSuggestionsRoute
  '/explore/tags': typeof ExploreTagsRoute
  '/explore': typeof ExploreIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/explore': typeof ExploreRouteRouteWithChildren
  '/home': typeof HomeRoute
  '/notifications': typeof NotificationsRoute
  '/explore/links': typeof ExploreLinksRoute
  '/explore/suggestions': typeof ExploreSuggestionsRoute
  '/explore/tags': typeof ExploreTagsRoute
  '/explore/': typeof ExploreIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/explore'
    | '/home'
    | '/notifications'
    | '/explore/links'
    | '/explore/suggestions'
    | '/explore/tags'
    | '/explore/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/home'
    | '/notifications'
    | '/explore/links'
    | '/explore/suggestions'
    | '/explore/tags'
    | '/explore'
  id:
    | '__root__'
    | '/explore'
    | '/home'
    | '/notifications'
    | '/explore/links'
    | '/explore/suggestions'
    | '/explore/tags'
    | '/explore/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ExploreRouteRoute: typeof ExploreRouteRouteWithChildren
  HomeRoute: typeof HomeRoute
  NotificationsRoute: typeof NotificationsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/notifications': {
      id: '/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/explore': {
      id: '/explore'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof ExploreRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/explore/': {
      id: '/explore/'
      path: '/'
      fullPath: '/explore/'
      preLoaderRoute: typeof ExploreIndexRouteImport
      parentRoute: typeof ExploreRouteRoute
    }
    '/explore/tags': {
      id: '/explore/tags'
      path: '/tags'
      fullPath: '/explore/tags'
      preLoaderRoute: typeof ExploreTagsRouteImport
      parentRoute: typeof ExploreRouteRoute
    }
    '/explore/suggestions': {
      id: '/explore/suggestions'
      path: '/suggestions'
      fullPath: '/explore/suggestions'
      preLoaderRoute: typeof ExploreSuggestionsRouteImport
      parentRoute: typeof ExploreRouteRoute
    }
    '/explore/links': {
      id: '/explore/links'
      path: '/links'
      fullPath: '/explore/links'
      preLoaderRoute: typeof ExploreLinksRouteImport
      parentRoute: typeof ExploreRouteRoute
    }
  }
}

interface ExploreRouteRouteChildren {
  ExploreLinksRoute: typeof ExploreLinksRoute
  ExploreSuggestionsRoute: typeof ExploreSuggestionsRoute
  ExploreTagsRoute: typeof ExploreTagsRoute
  ExploreIndexRoute: typeof ExploreIndexRoute
}

const ExploreRouteRouteChildren: ExploreRouteRouteChildren = {
  ExploreLinksRoute: ExploreLinksRoute,
  ExploreSuggestionsRoute: ExploreSuggestionsRoute,
  ExploreTagsRoute: ExploreTagsRoute,
  ExploreIndexRoute: ExploreIndexRoute,
}

const ExploreRouteRouteWithChildren = ExploreRouteRoute._addFileChildren(
  ExploreRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  ExploreRouteRoute: ExploreRouteRouteWithChildren,
  HomeRoute: HomeRoute,
  NotificationsRoute: NotificationsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
